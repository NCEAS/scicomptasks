---
title: "Tutorials"
---

Some of the content that we produce is not as detailed as our full workshops but has a wider scope than the content included in our "Best Practices" suggestions. This information can broadly be defined as "tutorials" though their depth and scope can vary significantly depending on the topic being tutorialized. As with our Best Practices, this page is under constant development so please [post an issue](https://github.com/NCEAS/scicomptasks/issues) if you have an idea for a tutorial that you'd like to suggest that we create.

## Building a Website with Quarto

[Quarto](https://quarto.org/) is a new tool developed by RStudio (the company, not the program) to create a more 'what you see is what you get' editor for creating markdown files and products (e.g., books, websites, etc.). Additionally, it includes a visual editor that allows users to insert headings and embed figures via buttons that are intuitively labeled rather than through somewhat arcane HTML text or symbols. While Quarto is still in its infancy, it is rapidly gathering a following due to the aforementioned visual editor and for the ease with which quarto documents and websites can be created.

### Prerequisites

To follow along with this tutorial you will need to take the following steps:

- [Download R](https://cran.r-project.org/)

- [Download RStudio](https://www.rstudio.com/products/rstudio/download/)

- [Download Quarto](https://quarto.org/docs/get-started/)

- [Install `git`](https://happygitwithr.com/install-git.html)

- [Create a GitHub Account](https://github.com/)

- [Connect `git` to GitHub](https://njlyon0.github.io/asm-2022_github-workshop/setup.html#connecting-programs)

Feel free to skip any steps that you have already completed!

### Create a New R Project

To begin, **click the "Project" button** in the top right of your RStudio session.

<img src="images/tutorial_quarto/website-tutorial_new-proj-1.png" width = "100%" />

In the resulting dialogue, **click the "New Directory" option.**

<img src="images/tutorial_quarto/website-tutorial_new-proj-2.png" width = "60%" />

From the list of options for project templates, **select "Quarto Website".**

<img src="images/tutorial_quarto/website-tutorial_new-proj-3.png" width = "60%" />

**Pick a title** and **check the "Create a git repository" checkbox.** For your title, short but descriptive titles are most effective. Once that is done, click **"Create Project"** in the bottom right of the window.

<img src="images/tutorial_quarto/website-tutorial_new-proj-4.png" width = "60%" />

After a few seconds, RStudio should refresh with a Quarto document (such documents have the file extension ".qmd") and a "_quarto.yml" file open.

<img src="images/tutorial_quarto/website-tutorial_new-proj-5.png" width = "75%" />

Part of Quarto's central philosophy is that all of the formatting of individual .qmd files in a project is governed by the settings created by a singular .yml file. In an R markdown project some of the global settings are set in .yml but other settings are handled within each .Rmd file. This centralization is a key innovation in streamlining projects and is one reason for Quarto's quick popularity.

### Preparing Project for Web Deployment

To prepare your project for web deployment via GitHub Pages, we have **three** quick steps that we must first complete.

*First*, in the "_quarto.yml" file, **add `output-dir: docs` as a subheading beneath the `project:` heading.** Make sure that the indentation is the same as the `type: website` but the new line can be either above or below that line.

<img src="images/tutorial_quarto/website-tutorial_deploy-prep-1.png" width = "75%" />

*Second*, **in the "Terminal" pane run `touch .nojekyll`.** This creates a file called ".nojekyll" that is necessary for hosting your website via GitHub Pages. 

*Third*, **in the "Terminal" pane run `quarto render`.** This processes the template .qmd files you currently have in the repository and prepares them to become actual web pages.

Once you've done these three things you can move on to creating a GitHub repository so that we can take the necessary steps to having GitHub host your website!

### Make a New GitHub Repository

From your GitHub **"Repositories"** tab, click the **<span style="color:green"> green </span> "New"** button.

<img src="images/tutorial_quarto/website-tutorial_new-github-1.png" width = "100%" />

**Add a title** to your repository and **add a description.** Once you've added these two things, scroll down and click the **<span style="color:green"> green </span> "Create repository" button.**

<img src="images/tutorial_quarto/website-tutorial_new-github-2.png" width = "60%" />

Be sure that you **do not add a README**, **do not add a gitignore**, and **do not add a license.** Adding any of these three will cause a merge conflict when we link the project that you just created with the GitHub repository that you are in the process of creating.

<img src="images/tutorial_quarto/website-tutorial_new-github-3.png" width = "60%" />

After a few seconds you should be placed on your new repository's landing page which will look like the below image because there isn't anything in your repository (yet).

Copy the link in the field and go back to your RStudio session.

<img src="images/tutorial_quarto/website-tutorial_new-github-4.png" width = "100%" />

### Adding your Project to GitHub

The following steps include a sequence of command line operations that will be relayed in code chunks below. **Unless otherwise stated, all of the following code should be run in "Terminal".**

If you didn't check the "Create a git repository" button while creating the R project, you'll need to do that via the command line now. **If you did check that box, you should skip this step!**

```{r create-repo, eval = F}
# Start a git repository on the "main" branch
git init -b main
```

**Stage all of the files in your project to the git repository.** This includes the .yml file, all .qmd files and all of their rendered versions created when you ran `quarto render` earlier. This code is equivalent to checking the box for the files in the "Git" pane of RStudio.

```{r stage-everything, eval = F}
# Stage all files
git add .
```

Once everything has been staged, **you now must commit those staged files** with a message.

```{r commit-everything, eval = F}
# Commit all files with the message in quotes
git commit -m "Initial commit"
```

Now that your project files have been committed, you need to **tell your computer where you will be pushing to and pulling from.** Paste the link you copied at the end of the "Make a New GitHub Repository" into the code shown in the chunk below (inside of the `[...]`) and run it.

```{r set-remote, eval = F}
# Tell your computer which GitHub repository to connect to
git remote add origin [GITHUB_URL]
```

**Verify that URL** before continuing.

```{r verify-remote, eval = F}
# Confirm that URL worked
git remote -v
```

Finally, **push your commited changes** to the repostory that you set as the remote in the preceding two steps.

```{r push, eval = F}
# Push all of the content to the main branch
git push -u origin main
```

Now, **go back to GitHub** and refresh the page to see your project content safe and sound in your new GitHub repository!

<img src="images/tutorial_quarto/website-tutorial_git-github-connect-1.png" width = "100%" />

### Deploy Website via GitHub

In order to get your new website actually on the web, we'll need to tell GitHub that we want our website to be accessible at a .github.io URL.

To do this, **go to the "Settings" tab** with a gear icon and click it. You may be prompted to re-enter your GitHub password, do so and you can proceed.

<img src="images/tutorial_quarto/website-tutorial_github-deploy-1.png" width = "100%" />

In the resulting page, look towards the bottom of the left sidebar of settings categories and **click the "Pages" option.** This is at the very bottom of the sidebar in the screen capture below but is towards the middle of all of the settings categories Github offers you.

<img src="images/tutorial_quarto/website-tutorial_github-deploy-2.png" width = "100%" />

Scroll down to the middle of this page and where it says "Branch" **click the dropdown menu that says "None" by default.**

<img src="images/tutorial_quarto/website-tutorial_github-deploy-3.png" width = "100%" />

**Select "main"** from the dropdown.

<img src="images/tutorial_quarto/website-tutorial_github-deploy-4.png" width = "60%" />

This opens up a new dropdown menu where you can select which folder in your repository contains your website's content (it defaults to "/ (root)"). Because we specified `output-dir: docs` in the .yml file earlier we can **select "/docs" from the dropdown menu.**

<img src="images/tutorial_quarto/website-tutorial_github-deploy-5.png" width = "60%" />

Once you've told GitHub that you want a website generated from the "docs" folder on the main branch, **click the "Save" button.**

<img src="images/tutorial_quarto/website-tutorial_github-deploy-6.png" width = "75%" />

From this moment your website has begun being deployed by GitHub! You can check the status of the building process by **navigating to the "Actions" tab of your repository.**

**Select the "pages build and deployment workflow** in the list of workflows on the bottom righthand side of the page.

<img src="images/tutorial_quarto/website-tutorial_github-deploy-7.png" width = "100%" />

This **shows you GitHub's building and deployment process as a flowchart.** While it is working on a given step there will be an **<span style="color:orange">amber</span>** circle next to the name of the sub-task and when these are completed the **<span style="color:orange">amber</span>** circle becomes a **<span style="color:green">green</span>** circle with a check mark.

<img src="images/tutorial_quarto/website-tutorial_github-deploy-8.png" width = "100%" />

When the three steps are complete the **<span style="color:orange">amber</span>** clock symbol next to the "pages build and deployment" action will turn into a larger **<span style="color:green">green</span>** circle with a check mark. This is GitHub's way of telling you that your website is live and accessible to anyone on the internet.

<img src="images/tutorial_quarto/website-tutorial_github-deploy-9.png" width = "100%" />

You can now visit your website by visiting its dedicated URL. **This URL can be found by returning to the "Settings" tab and then scrolling through the sidebar to the "Pages" section.**

Alternately, the website for your repository always uses the following composition: *https://**<span style="color:blue">repository owner</span>**.github.io/**<span style="color:purple">repository name</span>**/*

<img src="images/tutorial_quarto/website-tutorial_github-deploy-10.png" width = "100%" />




### GitHub Housekeeping



### Adding Content





RAW CONTENT BELOW (vvv)



Open up RStudio and go to File -> New Project -> New Directory -> Simple R Markdown Website and then fill in the following boxes to name and save your website source code wherever you would like. 

<!-- {r, out.width = "33%", fig.align='default'} -->
<!-- include_graphics(here("img", "new_project.png")) -->
<!-- include_graphics(here("img", "new_website.png")) -->
<!-- include_graphics(here("img", "directory_name.png")) -->

After you click "Create Project", you should see three files in your RStudio window: `_site.yml`, `about.Rmd`, and `index.Rmd`. The idea is that each R Markdown (`.Rmd`) file will be a "page" in our website, and the `.yml` file will contain instructions on how to combine these pages together. 

  - `index.Rmd`: This demo R Markdown file will be our website's "home" page.
  - `about.Rmd`: This demo R Markdown file will be our website's "about" page.
  - `_site.yml`: This a configuration file: We'll use this to change how our website looks; 

    _Note:_ When building a website, R Markdown only looks for the files `index.Rmd` and `_site.yml`. So change the contents of these files however you like, but don't change the name! On the other hand, feel free the change the name of `about.Rmd` to whatever you'd like! 
    
    
To build the demo website, we can go to the Build Pane on RStudio (typically in the top right) and press "Build Website". Alternatively, we can run the command `rmarkdown::render_site()` in the console.

<!-- knitr::include_graphics("https://media.github.nceas.ucsb.edu/user/152/files/11586800-83b0-11e9-9f8b-b542b0f59d16") -->

This will create a new folder called `_site` in the working directory with our website! To see what it looks like, go into the new `_site` folder and open up either the `index.html` or the `about.html` file in your web browser. Clicking on the "Home" tab, you should see something like this:

<!-- {r, out.width="75%"} -->
<!-- include_graphics(here("img", "demo_website.png")) -->

Now that we have an idea of how the demo works, let's start personalizing it!

## Updating the website

### Changing output directory
First of all, the folder where our website lives was called `_site`. We can change this name to be anything, but let's keep it simple and call it `docs`: 
Go into our `_site.yml` file and add in `output_dir: "docs"` underneath the name of the project.

<!-- knitr::include_graphics(here("img", "output_dir.png")) -->

Now we can build the website again (either clicking "Build Website" or running `rmarkdown::render_site()`) and notice that we made a folder called `docs` instead of `_site`! We can even safely delete the old `_site` folder, since our website will now always be built and updated into the `docs` folder.

### Adding a page to the website:
Create an R Markdown file (you can name it whatever you want, but ours is called `practice.Rmd`) containing all of the information you want in that page. Make sure that you have `output: html_document` in the header!

<!-- knitr::include_graphics(here("img", "rmd_sample.png")) -->

Once your page is all filled up, go into the `_site.yml` file and add the following underneath the other pages:

  - `text: "<page name to be displayed>"`
  - `href: <name of rmd file you just made>.html`

For example,

<!-- knitr::include_graphics(here("img", "yml_page.png")) -->

Then if we build our website again, we can see our new page!

<!-- {r, out.width="75%"} -->
<!-- knitr::include_graphics(here("img", "new_page.png")) -->


## Additional Features

If you want to get fancy with styling the website, it helps to know some HTML or CSS. Here are a few examples of some of the things you can do:

### Apply a theme

To apply an HTML/CSS change to every page of your website, we can add an `output` section to our `_site.yml` file.  
For example, to change the theme of our website to Bootswatch's "flatly" theme, we can apply like it like so:

<!-- include_graphics(here("img", "yml_theme.png")) -->

Let's see what our website looks like now!

<!-- {r, out.width="75%"} -->
<!-- include_graphics(here("img", "website_theme.png")) -->

You can see more bootswatch themes [here](https://bootswatch.com/).


### Add a footer

If we want to add a footer to the website, make an HTML (or RHTML) document with the footer, like so:

<!-- include_graphics(here("img", "footer_sample.png")) -->

Then we can add this footer to our website by adding an `include` section to the `output` in `_site.yml`, like so

<!-- knitr::include_graphics(here("img", "yml_footer.png")) -->

Then if we build our website again, we can see the footer at the bottom of every page

<!-- {r, out.width="75%"} -->
<!-- include_graphics(here("img", "website_footer.png")) -->

_Note:_ For more themes and styling options, look at Section 3.1.4 [here](https://bookdown.org/yihui/rmarkdown/html-document.html)


For more information on building a website, see Chapter 10.5 of https://bookdown.org/yihui/rmarkdown/rmarkdown-site.html


